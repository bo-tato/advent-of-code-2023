(in-package :advent-of-code-2023)
(in-readtable :aoc-sugar)

(defparameter *graph* (dict))

(loop for line in (read-file-lines "input.txt")
      for (node . rest) = (words line)
      do (dolist (node2 rest)
           (pushnew node2 (@ *graph* node))
           (pushnew node (@ *graph* node2))))

(defun random-edge (graph)
  (let (edges)
    (do-hash-table (n1 nodes graph)
      (dolist (n2 nodes)
        (push (cons n1 n2) edges)))
    (random-elt edges)))

;; https://en.wikipedia.org/wiki/Karger%27s_algorithm
(defun contract (graph)
  (loop with g = (copy-hash-table graph)
        while (> (hash-table-count g) 2)
        for (u . v) = (random-edge g)
        for uv = (concat u v)
        do (dolist (node (append (@ g u) (@ g v)))
             (push node (@ g uv))
             (push uv (@ g node)))
           (remhash u g)
           (remhash v g)
           (dolist (node (hash-table-keys g))
             (removef (@ g node) u :test 'string=)
             (removef (@ g node) v :test 'string=))
        finally (return g)))

(loop for min-cut = (contract *graph*)
      until (= 3 (length (first (hash-table-values min-cut))))
      finally (format t "part1: ~a~%" (apply #'* (mapcar Î»(/ (length _) 3)
                                                         (hash-table-keys min-cut)))))
